// Generated by CoffeeScript 1.3.3
(function() {
  var cleanResources, flatten, http, httpProxy, knitstream, parse, path, startServer;

  http = require('http');

  path = require('path');

  parse = require('url').parse;

  httpProxy = require('http-proxy');

  flatten = require('./flatten');

  knitstream = require('./knitstream');

  cleanResources = function(resources) {
    var handler, rs, url;
    rs = {};
    for (url in resources) {
      handler = resources[url];
      rs[path.resolve('/', url)] = handler;
    }
    return rs;
  };

  exports.serve = function(module, action, knit, log) {
    var config, handler, proxyName, resources, _ref, _ref1, _ref2, _ref3;
    config = ((module != null ? module.server : void 0) || function() {
      return {};
    })(action, knit, log);
    if (config != null) {
      if ((_ref = config.port) == null) {
        config.port = 8081;
      }
    }
    if (config != null) {
      if ((_ref1 = config.proxyPort) == null) {
        config.proxyPort = 8080;
      }
    }
    if (config != null) {
      if ((_ref2 = config.host) == null) {
        config.host = '127.0.0.1';
      }
    }
    if (config != null) {
      if ((_ref3 = config.proxyHost) == null) {
        config.proxyHost = '127.0.0.1';
      }
    }
    proxyName = "" + config.proxyHost + ":" + config.proxyPort;
    resources = cleanResources(flatten.module(module, action, knit, log));
    startServer(config, resources, log);
    log.info("Knit serving at " + config.host + ":" + config.port + ":");
    for (path in resources) {
      handler = resources[path];
      log.info("" + path);
    }
    return log.info("otherwise proxy for " + proxyName);
  };

  startServer = function(config, resources, log) {
    var proxy, proxyName;
    proxyName = "" + config.proxyHost + ":" + config.proxyPort;
    proxy = new httpProxy.RoutingProxy();
    log.info("Using http-proxy");
    return http.createServer(function(req, res) {
      var cleanUrl, handler, length, message, stream;
      cleanUrl = parse(req.url, true).pathname;
      if (cleanUrl in resources) {
        handler = resources[cleanUrl];
        message = new http.OutgoingMessage();
        req.on('end', function() {
          return log.info("" + req.method + " " + cleanUrl);
        });
        if (req.method === 'HEAD') {
          length = 0;
          res.write = function(data) {
            var _ref;
            length = length + ((_ref = data != null ? data.length : void 0) != null ? _ref : 0);
            return this.setHeader('Content-Length', 0);
          };
          res.end = function(data) {
            var _ref;
            length = length + ((_ref = data != null ? data.length : void 0) != null ? _ref : 0);
            this.setHeader('Content-Length', 0);
            return message.end.call(this);
          };
        }
        stream = knitstream.fromHTTPResponse(res);
        stream.setHeader('Cache-Control', 'no-cache');
        stream.setHeader('Content-Type', 'text/plain');
        return handler(stream);
      } else {
        req.on('end', function() {
          return log.debug("" + req.method + " " + proxyName + req.url);
        });
        req.headers['host'] = proxyName;
        return proxy.proxyRequest(req, res, {
          host: config.proxyHost,
          port: config.proxyPort
        });
      }
    }).listen(config.port, config.host);
  };

}).call(this);
